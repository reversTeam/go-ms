// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/child/protobuf/child.proto

package go_micro_service_child

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protobuf "github.com/reversTeam/go-ms/services/goms/protobuf"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("services/child/protobuf/child.proto", fileDescriptor_ec0f29e3610beb3f)
}

var fileDescriptor_ec0f29e3610beb3f = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x51, 0xeb, 0x22, 0x29, 0x8a, 0x46, 0xe8, 0xa1, 0x7a, 0x6a, 0x2f, 0x52, 0x30, 0x81,
	0x7a, 0x13, 0x3c, 0xd5, 0xd2, 0x8b, 0x5e, 0xaa, 0x82, 0xd7, 0xfd, 0x33, 0xa6, 0x81, 0xcd, 0xce,
	0x9a, 0xcc, 0x16, 0x8a, 0x08, 0xe2, 0x2b, 0xf8, 0x68, 0xbe, 0x82, 0x0f, 0x22, 0x9b, 0x8d, 0xb5,
	0x20, 0x88, 0x60, 0x8f, 0xc3, 0xcc, 0xf7, 0xfd, 0xbe, 0x8f, 0x61, 0x7d, 0x07, 0x76, 0xae, 0x53,
	0x70, 0x32, 0x9d, 0xe9, 0x3c, 0x93, 0xa5, 0x45, 0xc2, 0xa4, 0x7a, 0x68, 0x46, 0xe1, 0x47, 0xde,
	0x51, 0x28, 0x8c, 0x4e, 0x2d, 0x8a, 0x70, 0x2d, 0xfc, 0xb6, 0x7b, 0xac, 0x10, 0x55, 0x0e, 0x32,
	0x2e, 0xb5, 0x8c, 0x8b, 0x02, 0x29, 0x26, 0x8d, 0x85, 0x6b, 0x54, 0xdd, 0xa3, 0xb0, 0x5d, 0x5a,
	0x82, 0x29, 0x69, 0x11, 0x96, 0x17, 0x4a, 0xd3, 0xac, 0x4a, 0x44, 0x8a, 0x46, 0x5a, 0x98, 0x83,
	0x75, 0xb7, 0x10, 0x1b, 0xa9, 0xf0, 0xd4, 0x38, 0xb9, 0xcc, 0xa4, 0xd0, 0xb8, 0x6f, 0x7d, 0x3d,
	0x35, 0xf2, 0xe1, 0x4b, 0x8b, 0x6d, 0x8f, 0xea, 0x0c, 0xfc, 0x86, 0xb5, 0xae, 0xb4, 0x23, 0xde,
	0x11, 0x0d, 0x4e, 0x7c, 0x9d, 0x8b, 0x71, 0x8d, 0xeb, 0xf6, 0xc5, 0x8f, 0xf0, 0xde, 0x67, 0x82,
	0xd7, 0x6e, 0x0a, 0xae, 0xc4, 0xc2, 0x41, 0x6f, 0xef, 0xf5, 0xfd, 0xe3, 0x6d, 0x73, 0x87, 0x47,
	0x4d, 0x6d, 0x7e, 0xcf, 0xa2, 0x91, 0x85, 0x98, 0xe0, 0x7f, 0xb6, 0x07, 0xde, 0xb6, 0xdd, 0x0b,
	0xb6, 0xe7, 0x1b, 0x03, 0xae, 0xd9, 0xd6, 0x04, 0x88, 0x9f, 0xfc, 0x22, 0x1f, 0x17, 0xa4, 0x69,
	0x31, 0x85, 0xc7, 0x0a, 0x1c, 0xfd, 0x0d, 0x74, 0xe8, 0x41, 0xbb, 0xbc, 0x1d, 0xbe, 0xf8, 0xa4,
	0xb3, 0x67, 0x8e, 0x2c, 0xba, 0x2b, 0xb3, 0xba, 0xc4, 0x9a, 0x69, 0x1d, 0x4f, 0xdb, 0x1f, 0xae,
	0xd2, 0xea, 0x6e, 0x39, 0x8b, 0x2e, 0x21, 0x87, 0xf5, 0x03, 0x43, 0xbd, 0xc1, 0x2a, 0x30, 0x89,
	0xfc, 0x47, 0xce, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x09, 0x2f, 0xe7, 0xc2, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChildClient is the client API for Child service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChildClient interface {
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error)
	Create(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error)
	Get(ctx context.Context, in *protobuf.GoMsEntityRequest, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error)
	Update(ctx context.Context, in *protobuf.GoMsEntityRequest, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error)
	Delete(ctx context.Context, in *protobuf.GoMsEntityRequest, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error)
}

type childClient struct {
	cc *grpc.ClientConn
}

func NewChildClient(cc *grpc.ClientConn) ChildClient {
	return &childClient{cc}
}

func (c *childClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error) {
	out := new(protobuf.GoMsResponse)
	err := c.cc.Invoke(ctx, "/go.micro.service.child.Child/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childClient) Create(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error) {
	out := new(protobuf.GoMsResponse)
	err := c.cc.Invoke(ctx, "/go.micro.service.child.Child/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childClient) Get(ctx context.Context, in *protobuf.GoMsEntityRequest, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error) {
	out := new(protobuf.GoMsResponse)
	err := c.cc.Invoke(ctx, "/go.micro.service.child.Child/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childClient) Update(ctx context.Context, in *protobuf.GoMsEntityRequest, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error) {
	out := new(protobuf.GoMsResponse)
	err := c.cc.Invoke(ctx, "/go.micro.service.child.Child/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childClient) Delete(ctx context.Context, in *protobuf.GoMsEntityRequest, opts ...grpc.CallOption) (*protobuf.GoMsResponse, error) {
	out := new(protobuf.GoMsResponse)
	err := c.cc.Invoke(ctx, "/go.micro.service.child.Child/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChildServer is the server API for Child service.
type ChildServer interface {
	List(context.Context, *empty.Empty) (*protobuf.GoMsResponse, error)
	Create(context.Context, *empty.Empty) (*protobuf.GoMsResponse, error)
	Get(context.Context, *protobuf.GoMsEntityRequest) (*protobuf.GoMsResponse, error)
	Update(context.Context, *protobuf.GoMsEntityRequest) (*protobuf.GoMsResponse, error)
	Delete(context.Context, *protobuf.GoMsEntityRequest) (*protobuf.GoMsResponse, error)
}

// UnimplementedChildServer can be embedded to have forward compatible implementations.
type UnimplementedChildServer struct {
}

func (*UnimplementedChildServer) List(ctx context.Context, req *empty.Empty) (*protobuf.GoMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedChildServer) Create(ctx context.Context, req *empty.Empty) (*protobuf.GoMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedChildServer) Get(ctx context.Context, req *protobuf.GoMsEntityRequest) (*protobuf.GoMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedChildServer) Update(ctx context.Context, req *protobuf.GoMsEntityRequest) (*protobuf.GoMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedChildServer) Delete(ctx context.Context, req *protobuf.GoMsEntityRequest) (*protobuf.GoMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterChildServer(s *grpc.Server, srv ChildServer) {
	s.RegisterService(&_Child_serviceDesc, srv)
}

func _Child_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.service.child.Child/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Child_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.service.child.Child/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).Create(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Child_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.GoMsEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.service.child.Child/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).Get(ctx, req.(*protobuf.GoMsEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Child_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.GoMsEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.service.child.Child/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).Update(ctx, req.(*protobuf.GoMsEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Child_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.GoMsEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.service.child.Child/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServer).Delete(ctx, req.(*protobuf.GoMsEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Child_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.service.child.Child",
	HandlerType: (*ChildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Child_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Child_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Child_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Child_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Child_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/child/protobuf/child.proto",
}
